function linear(t) {
    return t;
}

function easeInQuad(t) {
    return t * t;
}

function easeOutQuad(t) {
    return t * (2 - t);
}

function easeInOutQuad(t) {
    if (t < 0.5) return 2 * t * t;
    const f = -2 * t + 2;
    return 1 - (f * f) / 2;
}

function easeInCubic(t) {
    return t * t * t;
}

function easeOutCubic(t) {
    return (t - 1) ** 3 + 1;
}

function easeInOutCubic(t) {
    if (t < 0.5) return 4 * t * t * t;
    const f = t - 1;
    return 1 + 4 * f * f * f;
}

function easeInQuart(t) {
    return t * t * t * t;
}

function easeOutQuart(t) {
    return 1 - (t - 1) ** 4;
}

function easeInOutQuart(t) {
    if (t < 0.5) return 8 * t * t * t * t;
    const f = t - 1;
    return 1 - 8 * f * f * f * f;
}

function easeInQuint(t) {
    return t * t * t * t * t;
}

function easeOutQuint(t) {
    return 1 + (t - 1) ** 5;
}

function easeInOutQuint(t) {
    if (t < 0.5) return 16 * t * t * t * t * t;
    const f = t - 1;
    return 1 + 16 * f * f * f * f * f;
}

function easeInPoly(t, degree) {
    if (typeof degree !== "number" || degree <= 0) throw new Error("easeInPoly: parameter 'degree' must be a positive number.");
    return Math.pow(t, degree);
}

function easeOutPoly(t, degree) {
    if (typeof degree !== "number" || degree <= 0) throw new Error("easeOutPoly: parameter 'degree' must be a positive number.");
    return 1 - Math.pow(1 - t, degree);
}

function easeInOutPoly(t, degree) {
    if (typeof degree !== "number" || degree <= 0) throw new Error("easeInOutPoly: parameter 'degree' must be a positive number.");
    return t < 0.5
        ? 2 * Math.pow(t, degree)
        : 1 - 2 * Math.pow(1 - t, degree);
}

function easeInSine(t) {
    return 1 - Math.cos((t * Math.PI) / 2);
}

function easeOutSine(t) {
    return Math.sin((t * Math.PI) / 2);
}

function easeInOutSine(t) {
    return -(Math.cos(Math.PI * t) - 1) / 2;
}

function easeInExpo(t) {
    return t === 0 ? 0 : Math.pow(2, 10 * t - 10);
}

function easeOutExpo(t) {
    return t === 1 ? 1 : 1 - Math.pow(2, -10 * t);
}

function easeInOutExpo(t) {
    if (t === 0) return 0;
    if (t === 1) return 1;
    return t < 0.5
        ? Math.pow(2, 20 * t - 10) / 2
        : (2 - Math.pow(2, -20 * t + 10)) / 2;
}

function easeInCirc(t) {
    return 1 - Math.sqrt(1 - t * t);
}

function easeOutCirc(t) {
    return Math.sqrt(1 - (t - 1) ** 2);
}

function easeInOutCirc(t) {
    return t < 0.5
        ? (1 - Math.sqrt(1 - 4 * t * t)) / 2
        : (Math.sqrt(1 - (t - 1) ** 2) + 1) / 2;
}

function easeInElastic(t, amplitude = 1, period = 0.3) {
    if (t === 0) return 0;
    if (t === 1) return 1;
    if (amplitude < 1) amplitude = 1;
    const s = period / (2 * Math.PI) * Math.asin(1 / amplitude);
    return -(amplitude * Math.pow(2, 10 * t - 10) * Math.sin((t - s) * (2 * Math.PI) / period));
}

function easeOutElastic(t, amplitude = 1, period = 0.3) {
    if (t === 0) return 0;
    if (t === 1) return 1;
    if (amplitude < 1) amplitude = 1;
    const s = period / (2 * Math.PI) * Math.asin(1 / amplitude);
    return amplitude * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / period) + 1;
}

function easeInOutElastic(t, amplitude = 1, period = 0.3) {
    if (t === 0) return 0;
    if (t === 1) return 1;
    if (amplitude < 1) amplitude = 1;
    const s = period / (2 * Math.PI) * Math.asin(1 / amplitude);
    return t < 0.5
        ? -(amplitude * Math.pow(2, 20 * t - 10) * Math.sin((t - s) * (2 * Math.PI) / period)) / 2
        : (amplitude * Math.pow(2, -20 * t + 10) * Math.sin((t - s) * (2 * Math.PI) / period) + 1) / 2;
}

function easeInBack(t, s = 1.70158) {
    return t * t * ((s + 1) * t - s);
}

function easeOutBack(t, s = 1.70158) {
    return (t - 1) * (t - 1) * ((s + 1) * (t - 1) + s) + 1;
}

function easeInOutBack(t, s = 1.70158) {
    return t < 0.5
        ? (2 * t * t * ((s + 1) * 2 * t - s)) / 2
        : ((t - 1) * 2) ** 2 * ((s + 1) * (t - 1) * 2 + s) / 2 + 1;
}

function easeOutBounce(t) {
    if (t < 1 / 2.75) return 7.5625 * t * t;
    if (t < 2 / 2.75) return 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
    if (t < 2.5 / 2.75) return 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
    return 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
}

function easeInBounce(t) {
    return 1 - easeOutBounce(1 - t);
}

function easeInOutBounce(t) {
    return t < 0.5
        ? easeInBounce(t * 2) / 2
        : easeOutBounce(t * 2 - 1) / 2 + 0.5;
}

module.exports = {
    linear,
    easeInQuad,
    easeOutQuad,
    easeInOutQuad,
    easeInCubic,
    easeOutCubic,
    easeInOutCubic,
    easeInQuart,
    easeOutQuart,
    easeInOutQuart,
    easeInQuint,
    easeOutQuint,
    easeInOutQuint,
    easeInPoly,
    easeOutPoly,
    easeInOutPoly,
    easeInSine,
    easeOutSine,
    easeInOutSine,
    easeInExpo,
    easeOutExpo,
    easeInOutExpo,
    easeInCirc,
    easeOutCirc,
    easeInOutCirc,
    easeInElastic,
    easeOutElastic,
    easeInOutElastic,
    easeInBack,
    easeOutBack,
    easeInOutBack,
    easeInBounce,
    easeOutBounce,
    easeInOutBounce
};