import * as tween from "jstweening";
import { linear } from "jstweening";
type int32 = number;
type NATIVE_API = {
    set_pause(pause: int32): void;
    get_screen_size(): {
        width: int32;
        height: int32;
    };
    set_mouse_pos_rel(dx: int32, dy: int32): boolean;
    set_mouse_pos(x: int32, y: int32): boolean;
    set_mouse_x(x: int32): boolean;
    set_mouse_y(y: int32): boolean;
    get_mouse_pos(): {
        x: int32;
        y: int32;
    };
    mouse_is_left_down(): boolean;
    mouse_is_right_down(): boolean;
    mouse_is_middle_down(): boolean;
    click_left(): boolean;
    click_right(): boolean;
    click_middle(): boolean;
    mouse_left_down(): boolean;
    mouse_right_down(): boolean;
    mouse_middle_down(): boolean;
    mouse_left_up(): boolean;
    mouse_right_up(): boolean;
    mouse_middle_up(): boolean;
    is_mouse_swapped(): boolean;
    mouse_scroll(x: int32, y: int32): boolean;
    keys_press(key_data: Uint32Array): boolean;
};
type TweenFunction = (t: number) => number;
type AllMouseButtons = "primary" | "secondary" | "left" | "right" | "middle";
declare const API: {
    __native_do_not_use_this_it_might_crash_natively_if_misused: NATIVE_API;
    FAIL_SAFE: boolean;
    PAUSE: number;
    mouse: {
        LinearTween: typeof tween.linear;
        position: {
            x: number;
            y: number;
        };
        x: number;
        y: number;
        getPosition(): {
            x: number;
            y: number;
        };
        setPosition(x: number, y: number): undefined;
        moveTo(x: number, y: number, duration?: number, tween?: TweenFunction): {
            wait: () => Promise<void>;
            cancel: () => void | 0;
        } | {
            wait: () => null;
            cancel: () => null;
        };
        moveRel(dx: number, dy: number, duration?: number, tween?: TweenFunction): {
            wait: () => Promise<void>;
            cancel: () => void | 0;
        } | {
            wait: () => null;
            cancel: () => null;
        };
        dragTo(x: number, y: number, button?: AllMouseButtons, duration?: number, tween?: TweenFunction): Promise<any> | undefined;
        dragRel(dx: number, dy: number, button?: AllMouseButtons, duration?: number, tween?: typeof linear): Promise<any> | undefined;
        readonly isSwapped: boolean;
        down(button?: AllMouseButtons): any;
        up(button?: AllMouseButtons): any;
        click(button?: AllMouseButtons): any;
        scroll(y?: number, x?: number): void;
        hscroll(x?: number, y?: number): void;
    };
    keyboard: {
        press(...keys: string[]): void;
        down(...keys: string[]): void;
        up(...keys: string[]): void;
        write(...texts: string[]): void;
        hotkey(...keys: string[]): void;
    };
    screen: {
        readonly size: {
            width: int32;
            height: int32;
        };
        readonly width: number;
        readonly height: number;
        readonly center: {
            x: number;
            y: number;
        };
        includes(x: number, y: number): boolean;
        contains(x: number, y: number): boolean;
    };
};
declare const _default: typeof API & typeof tween;
export = _default;
